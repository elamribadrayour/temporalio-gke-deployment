repo: https://go.temporal.io/helm-charts

server:
  config:
    persistence:
      default:
        driver: "sql"

        sql:
          driver: "postgres12"
          host: temporal-postgresql
          port: 5432
          database: temporal
          user: temporal
          existingSecret: temporal-default-store
          maxConns: 20
          maxIdleConns: 20
          maxConnLifetime: "1h"
          # tls:
          #  enabled: true
          #  enableHostVerification: true
          #  serverName: _HOST_ # this is strictly required when using serverless CRDB offerings
          #  caFile: /path/to/certs/<CA-file> # Here we assumed that caFile, certFile, keyFile are stored in one secret mounted as 'secret-with-certs' (see: server.additionalVolumes and server.additionalVolumeMounts sections).
          #  certFile: /path/to/certs/<client-cert-file>
          #  keyFile: /path/to/certs/<client-key-file>

      visibility:
        driver: "sql"

        sql:
          driver: "postgres12"
          host: temporal-postgresql
          port: 5432
          database: "temporal_visibility"
          user: temporal
          existingSecret: temporal-visibility-store
          maxConns: 20
          maxIdleConns: 20
          maxConnLifetime: "1h"
          # tls:
          #  enabled: true
          #  enableHostVerification: true
          #  serverName: _HOST_ # this is strictly required when using serverless CRDB offerings
          #  caFile: /path/to/certs/<CA-file> # Here we assumed that caFile, certFile, keyFile are stored in one secret mounted as 'secret-with-certs' (see: server.additionalVolumes and server.additionalVolumeMounts sections).
          #  certFile: /path/to/certs/<client-cert-file>
          #  keyFile: /path/to/certs/<client-key-file>

    namespaces:
      create: true
      namespace:
        - name: default
          retention: 3d

  # additionalVolumes:
  #   - name: secret-with-certs
  #     secret:
  #       secretName: secret-with-certs
  # additionalVolumeMounts:
  #   - name: secret-with-certs
  #     mountPath: /path/to/certs/

cassandra:
  enabled: false

mysql:
  enabled: false

postgresql:
  enabled: true

prometheus:
  enabled: false

grafana:
  enabled: false
  
elasticsearch:
  enabled: false

schema:
  createDatabase:
    enabled: true
  setup:
    enabled: true
  update:
    enabled: true